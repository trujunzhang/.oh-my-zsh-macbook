## tide for typescript (https://github.com/ananthakumaran/tide)

  1. M-x tide-project-errors:
         List all errors in the project. Errors can be navigated using n and p.
         Press enter to open the file.
  2. M-x tide-fix:
         Apply code fix for the error at point. When invoked with a prefix arg,
         apply code fix for all the errors in the file that are similar to the error at point.

** Useful keys

*** Managing projects

|   | Key Binding | Description                                           |
|---+-------------+-------------------------------------------------------|
|   | ~SPC p r~   | open a recent file                                    |
|   | ~SPC p R~   | replace a string                                      |
|   | ~SPC p v~   | open project root in =vc-dir= or =magit=              |
| * | ~SPC /~     | search in project with the best search tool available |
| * | ~SPC r l    | resume the last completion buffer                     |
|   | ~SPC p I~   | invalidate the projectile cache                       |
|   | ~SPC p k~   | kill all project buffers                              |
|   | ~SPC p r~   | open a recent file                                    |
|   | , g g       | jump-to-definiton                                     |


*Note for Windows Users*: To enable fast indexing the GNU ~find~ or
Cygwin ~find~ must be in your ~PATH~.


*** Emacs Lisp


* Key bindings

| Key Binding                | Description                            |
|----------------------------+----------------------------------------|
| ~SPC m g g~                | go to definition of symbol under point |
| ~SPC m h h~                | describe symbol at point               |
| ~SPC m c c~                | byte compile the current file          |
| ~SPC m c l~                | popup compile-log buffer               |
| ~SPC m e $~ or ~SPC m e l~ | go to end of current line and evaluate |
| ~SPC m e b~                | evaluate current buffer                |
| ~SPC m e C~                | evaluate current =defun= or =setq=     |
| ~SPC m e e~                | evaluate sexp before point             |
| ~SPC m e f~                | evaluation current function            |
| ~SPC m e r~                | evaluate current region                |
| ~SPC m ​,​~                  | toggle =lisp state=                    |
| ~SPC m t b~                | run tests of current buffer            |
| ~SPC m t q~                | run =ert=                              |
| ~SPC m d m~                | open [[https://github.com/joddie/macrostep][macrostep]] transient-state         |

** Additional evaluation functions
If =smartparens= is used the following additional key bindings are available:

| Key Binding | Description                  |
|-------------+------------------------------|
| ~SPC m e c~ | evaluate sexp around point   |
| ~SPC m e s~ | evaluate symbol around point |

** Format code
The [[file:../../semantic/README.org][semantic]] layer should be installed for these key bindings to become active.

| Key Binding | Description             |
|-------------+-------------------------|
| ~SPC m = b~ | format current buffer   |
| ~SPC m = f~ | format current function |
| ~SPC m = o~ | format all on one line  |
| ~SPC m = s~ | format current sexp     |

** Debugging
To start debugging:

| Key Binding | Description                                                            |
|-------------+------------------------------------------------------------------------|
| ~SPC m d f~ | on a =defun= symbol toggle on the instrumentalisation of the function  |
| ~SPC m d F~ | on a =defun= symbol toggle off the instrumentalisation of the function |
| ~SPC m d t~ | insert =(debug)= to print the stack trace and re-evaluate the function |

In =edebug-mode= (=*Debugging*= is displayed in the minor modes segment of the
mode line)

TODO

In =debugger-mode= (=Debugger= is displayed in major mode segment of the mode
line)

TODO



**  Spacemacs online documentation

  http://spacemacs.org/doc/DOCUMENTATION.html

*** 14.8.11 Replacing text in several files
If you have ag, pt or ack installed, replacing an occurrence of text in several files can be performed via helm-ag.

Say you want to replace all foo occurrences by bar in your current project:

initiate a search with SPC /
enter in edit mode with C-c C-e
go to the occurrence and enter in iedit state with SPC s e
edit the occurrences then leave the iedit state
press C-c C-c
Note: In Spacemacs, helm-ag despite its name works with ack and pt as well (but not with grep).

*** 14.8.12 Renaming files in a directory
It is possible to batch rename files in a directory using wdired from an helm session:

browse for a directory using SPC f f
enter wdired with C-c C-e
edit the file names and use C-c C-c to confirm the changes
use C-c C-k to abort any changes


* Format html files

   1. M-x sgml-mode - Enable the sgml-mode major mode so that sgml-pretty-print command auto-loads.
   2. C-x h - Select the whole buffer.
   3. M-x sgml-pretty-print
