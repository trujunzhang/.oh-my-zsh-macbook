local which_key = require("which-key")
local icons = require("lib.icons")

local LazyVim = require("lazyvim.util")

local setup = {
  plugins = {
    marks = true,
    registers = true,
    spelling = {
      enabled = true,
      suggestions = 30,
    },
    presets = {
      operators = true,
      motions = true,
      text_objects = true,
      windows = true,
      nav = true,
      z = true,
      g = true,
    },
  },
  key_labels = {
    ["<leader>"] = icons.ui.Rocket .. "Space",
    ["<space>"] = icons.ui.Rocket .. "Space",
  },
  icons = {
    breadcrumb = icons.ui.ArrowOpen,
    separator = icons.ui.Arrow,
    group = "",
  },
  popup_mappings = {
    scroll_down = "<c-d>",
    scroll_up = "<c-u>",
  },
  window = {
    border = "shadow",
    position = "bottom",
    margin = { 0, 0, 0, 0 },
    padding = { 1, 2, 1, 2 },
    winblend = 10,
  },
  layout = {
    height = { min = 4, max = 24 },
    width = { min = 20, max = 50 },
    spacing = 3,
    align = "center",
  },
  ignore_missing = false,
  -- hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "^:", "^ ", "^call ", "^lua " },
  show_help = true,
  show_keys = true,
  triggers = "auto",
  triggers_nowait = {
    -- marks
    "`",
    "'",
    "g`",
    "g'",
    -- registers
    '"',
    "<c-r>",
    -- spelling
    "z=",
  },
  triggers_blacklist = {
    i = { "j", "j" },
    v = { "j", "j" },
  },
}

local i = {
  [" "] = "Whitespace",
  ['"'] = 'Balanced "',
  ["'"] = "Balanced '",
  ["`"] = "Balanced `",
  ["("] = "Balanced (",
  [")"] = "Balanced ) including white-space",
  [">"] = "Balanced > including white-space",
  ["<lt>"] = "Balanced <",
  ["]"] = "Balanced ] including white-space",
  ["["] = "Balanced [",
  ["}"] = "Balanced } including white-space",
  ["{"] = "Balanced {",
  ["?"] = "User Prompt",
  _ = "Underscore",
  a = "Argument",
  b = "Balanced ), ], }",
  c = "Class",
  f = "Function",
  o = "Block, conditional, loop",
  q = "Quote `, \", '",
  t = "Tag",
}

local a = vim.deepcopy(i)
for k, v in pairs(a) do
  a[k] = v:gsub(" including.*", "")
end

local ic = vim.deepcopy(i)
local ac = vim.deepcopy(a)

for key, name in pairs({ n = "Next", l = "Last" }) do
  i[key] = vim.tbl_extend("force", { name = "Inside " .. name .. " textobject" }, ic)
  a[key] = vim.tbl_extend("force", { name = "Around " .. name .. " textobject" }, ac)
end

local opts = {
  mode = "n",
  prefix = "<leader>",
  buffer = nil,
  silent = true,
  noremap = true,
  nowait = true,
}

local mappings = {
  { "<leader><Tab>", "<cmd>b#<cr>", desc = " Tab Previous", nowait = true, remap = false },
  { "<leader>T", group = " Test", nowait = true, remap = false },
  {
    "<leader>TF",
    '<cmd>lua require("neotest").run.run()<cr>',
    desc = "Run Current Test",
    nowait = true,
    remap = false,
  },
  { "<leader>TO", "<cmd>Neotest summary<cr>", desc = "Test Summary", nowait = true, remap = false },
  {
    "<leader>Tf",
    '<cmd>lua require("neotest").run.run(vim.fn.expand("%"))<cr>',
    desc = "Run Test",
    nowait = true,
    remap = false,
  },
  { "<leader>To", "<cmd>Neotest output-panel<cr>", desc = "Test Output", nowait = true, remap = false },
  { "<leader>c", group = " Config", nowait = true, remap = false },
  { "<leader>cF", "<cmd>retab<cr>", desc = "Fix Tabs", nowait = true, remap = false },
  { "<leader>cR", "<cmd>ReloadConfig<cr>", desc = "Reload Configs", nowait = true, remap = false },
  { "<leader>cc", "<cmd>CccConvert<cr>", desc = "Convert Color", nowait = true, remap = false },
  { "<leader>cd", "<cmd>RootDir<cr>", desc = "Root Directory", nowait = true, remap = false },
  { "<leader>ce", "<cmd>e $MYVIMRC<cr>", desc = "Edit Config", nowait = true, remap = false },
  {
    "<leader>cf",
    "<cmd>lua vim.lsp.buf.format({async = true})<cr>",
    desc = "Format File",
    nowait = true,
    remap = false,
  },
  { "<leader>cl", "<cmd>:g/^\\s*$/d<cr>", desc = "Clean Empty Lines", nowait = true, remap = false },
  { "<leader>cn", "<cmd>set relativenumber!<cr>", desc = "Relative Numbers", nowait = true, remap = false },
  { "<leader>cp", "<cmd>CccPick<cr>", desc = "Pick Color", nowait = true, remap = false },
  { "<leader>cr", "<cmd>Telescope reloader<cr>", desc = "Reload Module", nowait = true, remap = false },
  { "<leader>j", group = " JavaScript", nowait = true, remap = false },
  { "<leader>jd", "<cmd>TSToolsGoToSourceDefinition<cr>", desc = "Source definition", nowait = true, remap = false },
  { "<leader>jf", "<cmd>TSToolsFixAll<cr>", desc = "Fix all", nowait = true, remap = false },
  {
    "<leader>jg",
    '<cmd>lua require("package-info").toggle()<cr>',
    desc = "Toggle package info",
    nowait = true,
    remap = false,
  },
  { "<leader>ji", "<cmd>TSToolsAddMissingImports<cr>", desc = "Add imports", nowait = true, remap = false },
  { "<leader>jo", "<cmd>TSToolsOrganizeImports<cr>", desc = "Organize imports", nowait = true, remap = false },
  { "<leader>jr", "<cmd>TSToolsRenameFile<cr>", desc = "Rename file", nowait = true, remap = false },
  { "<leader>js", "<cmd>TSToolsSortImports<cr>", desc = "Sort imports", nowait = true, remap = false },
  { "<leader>jt", "<cmd>TSC<cr>", desc = "TSC", nowait = true, remap = false },
  {
    "<leader>ju",
    '<cmd>lua require("package-info").update()<cr>',
    desc = "Update package",
    nowait = true,
    remap = false,
  },
  {
    "<leader>jv",
    '<cmd>lua require("package-info").change_version()<cr>',
    desc = "Change Version",
    nowait = true,
    remap = false,
  },
  {
    "<leader>jx",
    '<cmd>lua require("package-info").delete()<cr>',
    desc = "Delete package",
    nowait = true,
    remap = false,
  },
  { "<leader>l", group = " LSP", nowait = true, remap = false },
  { "<leader>lF", "<cmd>Telescope lsp_references<cr>", desc = "References", nowait = true, remap = false },
  {
    "<leader>lI",
    "<cmd>Lspsaga show_workspace_diagnostics<cr>",
    desc = "Workspace Diagnostics",
    nowait = true,
    remap = false,
  },
  { "<leader>lL", "<cmd>LspInfo<cr>", desc = "LSP Info", nowait = true, remap = false },
  { "<leader>lP", "<cmd>Telescope lsp_outgoing_calls<cr>", desc = "Outgoing Calls", nowait = true, remap = false },
  { "<leader>lR", "<cmd>Lspsaga project_replace<cr>", desc = "Replace", nowait = true, remap = false },
  {
    "<leader>lS",
    "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",
    desc = "Workspace Symbols",
    nowait = true,
    remap = false,
  },
  {
    "<leader>lT",
    "<cmd>Lspsaga goto_type_definition<cr>",
    desc = "Goto Type Definition",
    nowait = true,
    remap = false,
  },
  { "<leader>la", "<cmd>Lspsaga code_action<cr>", desc = "Code Action", nowait = true, remap = false },
  { "<leader>ld", "<cmd>Lspsaga goto_definition<cr>", desc = "Goto Definition", nowait = true, remap = false },
  { "<leader>lf", "<cmd>Lspsaga finder<cr>", desc = "Finder", nowait = true, remap = false },
  { "<leader>lh", "<cmd>Lspsaga hover_doc<cr>", desc = "Hover", nowait = true, remap = false },
  { "<leader>li", "<cmd>Telescope diagnostics<cr>", desc = "Diagnostics", nowait = true, remap = false },
  { "<leader>lj", "<cmd>Lspsaga diagnostic_jump_next<cr>", desc = "Next Diagnostic", nowait = true, remap = false },
  { "<leader>lk", "<cmd>Lspsaga diagnostic_jump_prev<cr>", desc = "Prev Diagnostic", nowait = true, remap = false },
  {
    "<leader>ll",
    "<cmd>lua require('lsp_lines').toggle()<cr>",
    desc = "Toggle LSP Lines",
    nowait = true,
    remap = false,
  },
  { "<leader>lo", "<cmd>Lspsaga outline<cr>", desc = "Outline", nowait = true, remap = false },
  { "<leader>lp", "<cmd>Telescope lsp_incoming_calls<cr>", desc = "Incoming Calls", nowait = true, remap = false },
  { "<leader>lr", "<cmd>Lspsaga rename<cr>", desc = "Rename", nowait = true, remap = false },
  { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols", nowait = true, remap = false },
  {
    "<leader>lt",
    "<cmd>Lspsaga peek_type_definition<cr>",
    desc = "Peek Type Definition",
    nowait = true,
    remap = false,
  },
  { "<leader>m", group = " Modes", nowait = true, remap = false },
  { "<leader>mZ", "<cmd>Twilight<cr>", desc = "Twilight", nowait = true, remap = false },
  { "<leader>mc", "<cmd>CccHighlighterToggle<cr>", desc = "Highlight Colors", nowait = true, remap = false },
  { "<leader>md", "<cmd>Dashboard<cr>", desc = "Dashboard", nowait = true, remap = false },
  { "<leader>mh", "<cmd>Hardtime toggle<cr>", desc = "Hardtime", nowait = true, remap = false },
  { "<leader>mm", "<cmd>MarkdownPreviewToggle<cr>", desc = "Markdown Preview", nowait = true, remap = false },
  -- { "<leader>mn", "<cmd>Telescope notify<cr>", desc = "Notifications", nowait = true, remap = false },
  { "<leader>mr", "<cmd>%SnipRun<cr>", desc = "Run File", nowait = true, remap = false },
  { "<leader>ms", "<cmd>set spell!<cr>", desc = "Spellcheck", nowait = true, remap = false },
  { "<leader>mz", "<cmd>ZenMode<cr>", desc = "ZenMode", nowait = true, remap = false },
  { "<leader>n", group = " Notes", nowait = true, remap = false },
  { "<leader>nJ", "<cmd>put =strftime('%F')<cr>", desc = "Insert Date", nowait = true, remap = false },
  { "<leader>nK", "<cmd>put =strftime('%F-%H-%M')<cr>", desc = "Insert Time", nowait = true, remap = false },
  { "<leader>nd", "<cmd>Tdo<cr>", desc = "Today's Todo", nowait = true, remap = false },
  { "<leader>ne", "<cmd>TdoEntry<cr>", desc = "Today's Entry", nowait = true, remap = false },
  { "<leader>nf", "<cmd>TdoFiles<cr>", desc = "All Notes", nowait = true, remap = false },
  { "<leader>ng", "<cmd>TdoFind<cr>", desc = "Find Notes", nowait = true, remap = false },
  { "<leader>nh", "<cmd>Tdo -1<cr>", desc = "Yesterday's Todo", nowait = true, remap = false },
  { "<leader>nj", "<cmd>put =strftime('%a %d %b %r')<cr>", desc = "Insert Human Date", nowait = true, remap = false },
  { "<leader>nk", "<cmd>put =strftime('%r')<cr>", desc = "Insert Human Time", nowait = true, remap = false },
  { "<leader>nl", "<cmd>Tdo 1<cr>", desc = "Tomorrow's Todo", nowait = true, remap = false },
  { "<leader>nn", "<cmd>TdoNote<cr>", desc = "New Note", nowait = true, remap = false },
  {
    "<leader>ns",
    '<cmd>lua require("tdo").run_with("commit " .. vim.fn.expand("%:p")) vim.notify("Committed!")<cr>',
    desc = "Commit Note",
    nowait = true,
    remap = false,
  },
  { "<leader>nt", "<cmd>TdoTodos<cr>", desc = "Incomplete Todos", nowait = true, remap = false },
  { "<leader>nx", "<cmd>TdoToggle<cr>", desc = "Toggle Todo", nowait = true, remap = false },
  { "<leader>p", group = " Packages", nowait = true, remap = false },
  { "<leader>pP", "<cmd>Lazy profile<cr>", desc = "Profile", nowait = true, remap = false },
  { "<leader>pc", "<cmd>Lazy check<cr>", desc = "Check", nowait = true, remap = false },
  { "<leader>pd", "<cmd>Lazy debug<cr>", desc = "Debug", nowait = true, remap = false },
  { "<leader>pi", "<cmd>Lazy install<cr>", desc = "Install", nowait = true, remap = false },
  { "<leader>pl", "<cmd>Lazy log<cr>", desc = "Log", nowait = true, remap = false },
  { "<leader>pm", "<cmd>Mason<cr>", desc = "Mason", nowait = true, remap = false },
  { "<leader>pp", "<cmd>Lazy<cr>", desc = "Plugins", nowait = true, remap = false },
  { "<leader>pr", "<cmd>Lazy restore<cr>", desc = "Restore", nowait = true, remap = false },
  { "<leader>ps", "<cmd>Lazy sync<cr>", desc = "Sync", nowait = true, remap = false },
  { "<leader>pu", "<cmd>Lazy update<cr>", desc = "Update", nowait = true, remap = false },
  { "<leader>px", "<cmd>Lazy clean<cr>", desc = "Clean", nowait = true, remap = false },
  { "<leader>q", "<cmd>qa!<cr>", desc = " Quit", nowait = true, remap = false },
  { "<leader>r", group = "󰠠 Refactor", nowait = true, remap = false },
  {
    "<leader>rR",
    "<Esc><cmd>lua require('telescope').extensions.refactoring.refactors()<CR>",
    desc = "Refactor Commands",
    nowait = true,
    remap = false,
  },
  {
    "<leader>rw",
    "<cmd>lua require('spectre').open_visual({select_word=true})<cr>",
    desc = "Replace Word",
    nowait = true,
    remap = false,
  },
  { "<leader>rS", "<cmd>lua require('spectre').open()<cr>", desc = "Replace", nowait = true, remap = false },
  {
    "<leader>rb",
    "<cmd>lua require('spectre').open_file_search({select_word=true})<cr>",
    desc = "Spectre Replace Buffer",
    nowait = true,
    remap = false,
  },
  {
    "<leader>rc",
    "<cmd>lua require('spectre').open_visual({select_word=true})<cr>",
    desc = "Spectre Search current word",
    nowait = true,
    remap = false,
  },
  { "<leader>rd", "", desc = "Go To Definition", nowait = true, remap = false },
  {
    "<leader>re",
    "<cmd>lua require('refactoring').refactor('Extract Block')<CR>",
    desc = "Extract Block",
    nowait = true,
    remap = false,
  },
  {
    "<leader>rf",
    "<cmd>lua require('refactoring').refactor('Extract Block To File')<CR>",
    desc = "Extract To File",
    nowait = true,
    remap = false,
  },
  { "<leader>rh", "", desc = "List Definition Head", nowait = true, remap = false },
  {
    "<leader>ri",
    "<cmd>lua require('refactoring').refactor('Inline Variable')<CR>",
    desc = "Inline Variable",
    nowait = true,
    remap = false,
  },
  { "<leader>rj", "", desc = "Next Usage", nowait = true, remap = false },
  { "<leader>rk", "", desc = "Previous Usage", nowait = true, remap = false },
  { "<leader>rl", "", desc = "List Definition", nowait = true, remap = false },
  { "<leader>rn", "", desc = "Swap Next", nowait = true, remap = false },
  { "<leader>rp", "", desc = "Swap Previous", nowait = true, remap = false },
  { "<leader>rr", "", desc = "Smart Rename", nowait = true, remap = false },
  {
    "<leader>rs",
    ":%s/\\<<C-r><C-w>\\>/<C-r><C-w>/gI<Left><Left><Left>",
    desc = "Replace Word",
    nowait = true,
    remap = false,
  },
  {
    "<leader>rv",
    "<cmd>lua require('refactoring').refactor('Extract Variable')<CR>",
    desc = "Extract Variable",
    nowait = true,
    remap = false,
  },
  { "<leader>s", group = " Split", nowait = true, remap = false },
  { "<leader>s-", "<C-w>s", desc = "Split Below", nowait = true, remap = false },
  { "<leader>sL", "<cmd>tablast<cr>", desc = "Last Tab", nowait = true, remap = false },
  { "<leader>sO", "<cmd>tabprevious<cr>", desc = "Previous Tab", nowait = true, remap = false },
  { "<leader>sW", "<cmd>lua require'utils'.sudo_write()<cr>", desc = "Force Write", nowait = true, remap = false },
  { "<leader>s\\", "<C-w>v", desc = "Split Right", nowait = true, remap = false },
  { "<leader>sc", "<cmd>tabclose<cr>", desc = "Close Tab", nowait = true, remap = false },
  { "<leader>sd", "<C-w>c", desc = "Close Window", nowait = true, remap = false },
  { "<leader>sf", "<cmd>tabfirst<cr>", desc = "First Tab", nowait = true, remap = false },
  { "<leader>sh", "<C-w>h", desc = "Move Left", nowait = true, remap = false },
  { "<leader>sj", "<C-w>j", desc = "Move Down", nowait = true, remap = false },
  { "<leader>sk", "<C-w>k", desc = "Move Up", nowait = true, remap = false },
  { "<leader>sl", "<C-w>l", desc = "Move Right", nowait = true, remap = false },
  { "<leader>so", "<cmd>tabnext<cr>", desc = "Next Tab", nowait = true, remap = false },
  { "<leader>sp", "<C-w>p", desc = "Previous Window", nowait = true, remap = false },
  { "<leader>sq", "<cmd>bw<cr>", desc = "Close Current Buf", nowait = true, remap = false },
  { "<leader>ss", "<cmd>split<cr>", desc = "Horizontal Split File", nowait = true, remap = false },
  { "<leader>st", "<cmd>tabnew<cr>", desc = "New Tab", nowait = true, remap = false },
  { "<leader>sv", "<cmd>vsplit<cr>", desc = "Vertical Split File", nowait = true, remap = false },
  { "<leader>sw", "<cmd>w<cr>", desc = "Write", nowait = true, remap = false },
  { "<leader>sx", "<cmd>x<cr>", desc = "Write and Quit", nowait = true, remap = false },
  { "<leader>t", group = " Terminal", nowait = true, remap = false },
  { "<leader>t`", "<cmd>Sterm<cr>", desc = "Horizontal Terminal", nowait = true, remap = false },
  { "<leader>tn", "<cmd>Sterm node<cr>", desc = "Node", nowait = true, remap = false },
  { "<leader>tp", "<cmd>Sterm bpython<cr>", desc = "Python", nowait = true, remap = false },
  { "<leader>tr", "<cmd>Sterm irb<cr>", desc = "Ruby", nowait = true, remap = false },
  { "<leader>ts", "<cmd>Sterm<cr>", desc = "Horizontal Terminal", nowait = true, remap = false },
  { "<leader>tt", "<cmd>Fterm<cr>", desc = "Terminal", nowait = true, remap = false },
  { "<leader>tv", "<cmd>Vterm<cr>", desc = "Vertical Terminal", nowait = true, remap = false },
  { "<leader>w", "<cmd>w<cr>", desc = "󰆓 Save", nowait = true, remap = false },
  { "<leader>x", "<cmd>x<cr>", desc = " Write and Quit", nowait = true, remap = false },
  { "<leader>y", group = " Yank", nowait = true, remap = false },
  { "<leader>yP", "<cmd>CApath<cr>", desc = "Copy Absolute Path", nowait = true, remap = false },
  { "<leader>yf", "<cmd>%y+<cr>", desc = "Copy Whole File", nowait = true, remap = false },
  {
    "<leader>yg",
    '<cmd>lua require"gitlinker".get_buf_range_url()<cr>',
    desc = "Copy Git URL",
    nowait = true,
    remap = false,
  },
  { "<leader>yp", "<cmd>CRpath<cr>", desc = "Copy Relative Path", nowait = true, remap = false },
}

local vopts = {
  mode = "v",
  prefix = "<leader>",
  buffer = nil,
  silent = true,
  noremap = true,
  nowait = true,
}

local vmappings = {
  {
    mode = { "v" },
    { "<leader>l", group = " LSP", nowait = true, remap = false },
    { "<leader>la", desc = "<cmd><C-U>Lspsaga range_code_action<CR>", nowait = true, remap = false },
    { "<leader>q", "<cmd>q<cr>", desc = " Quit", nowait = true, remap = false },
    { "<leader>r", group = "󰠠 Refactor", nowait = true, remap = false },
    {
      "<leader>re",
      "<esc><cmd>lua require('refactoring').refactor('Extract Function')<CR>",
      desc = "Extract Function",
      nowait = true,
      remap = false,
    },
    {
      "<leader>rf",
      "<esc><cmd>lua require('refactoring').refactor('Extract Function To File')<CR>",
      desc = "Extract To File",
      nowait = true,
      remap = false,
    },
    {
      "<leader>ri",
      "<esc><cmd>lua require('refactoring').refactor('Inline Variable')<CR>",
      desc = "Inline Variable",
      nowait = true,
      remap = false,
    },
    {
      "<leader>rr",
      "<Esc><cmd>lua require('telescope').extensions.refactoring.refactors()<CR>",
      desc = "Refactor Commands",
      nowait = true,
      remap = false,
    },
    {
      "<leader>rv",
      "<esc><cmd>lua require('refactoring').refactor('Extract Variable')<CR>",
      desc = "Extract Variable",
      nowait = true,
      remap = false,
    },
    { "<leader>s", "<esc><cmd>'<,'>SnipRun<cr>", desc = " Run Code", nowait = true, remap = false },
    { "<leader>x", "<cmd>x<cr>", desc = " Write and Quit", nowait = true, remap = false },
    { "<leader>y", group = " Yank", nowait = true, remap = false },
    {
      "<leader>yg",
      '<cmd>lua require"gitlinker".get_buf_range_url()<cr>',
      desc = "Copy Git URL",
      nowait = true,
      remap = false,
    },
  },
}

local no_leader_opts = {
  mode = "n",
  prefix = "",
  buffer = nil,
  silent = true,
  noremap = true,
  nowait = true,
}

local no_leader_mappings = {
  { "#", "<cmd>edit #<cr>", desc = "Alternate Buffer", nowait = true, remap = false },
  { "<C-Down>", "<cmd>resize -10<cr>", desc = "Decrease window height", nowait = true, remap = false },
  { "<C-Left>", "<cmd>vertical resize -10<cr>", desc = "Decrease window width", nowait = true, remap = false },
  { "<C-Right>", "<cmd>vertical resize +10<cr>", desc = "Increase window width", nowait = true, remap = false },
  { "<C-Up>", "<cmd>resize +10<cr>", desc = "Increase window height", nowait = true, remap = false },
  { "<C-b>", "<cmd>Lspsaga code_action<cr>", desc = "Code Action", nowait = true, remap = false },
  { "<C-f>", "<cmd>Telescope find_files<cr>", desc = "Find Files", nowait = true, remap = false },
  { "<C-g>", "<cmd>Fterm lazygit<cr>", desc = "Lazygit", nowait = true, remap = false },
  { "<C-h>", "<C-w>h", desc = "Move Left", nowait = true, remap = false },
  { "<C-i>", "<cmd>b#<cr>", desc = "Tab Previous", nowait = true, remap = false },
  { "<C-j>", "<C-w>j", desc = "Move Down", nowait = true, remap = false },
  { "<C-k>", "<C-w>k", desc = "Move Up", nowait = true, remap = false },
  { "<C-l>", "<C-w>l", desc = "Move Right", nowait = true, remap = false },
  -- { "<C-r>", <function 1>, desc = "Find Text", nowait = true, remap = false },
  { "<S-h>", "<cmd>bprevious<cr>", desc = "Previous Buffer", nowait = true, remap = false },
  { "<S-l>", "<cmd>bnext<cr>", desc = "Next Buffer", nowait = true, remap = false },
  { "K", "<cmd>Lspsaga hover_doc<cr>", desc = "LSP Hover", nowait = true, remap = false },
  { "U", "<cmd>redo<cr>", desc = "Redo", nowait = true, remap = false },
  { "[", group = " Previous", nowait = true, remap = false },
  { "[B", "<cmd>bfirst<cr>", desc = "First Buffer", nowait = true, remap = false },
  { "[b", "<cmd>bprevious<cr>", desc = "Buffer", nowait = true, remap = false },
  { "[d", "<cmd>Lspsaga diagnostic_jump_prev<cr>", desc = "Diagnostic", nowait = true, remap = false },
  { "[e", "g;", desc = "Edit", nowait = true, remap = false },
  { "[g", "<cmd>Gitsigns prev_hunk<cr>", desc = "Git Hunk", nowait = true, remap = false },
  { "[j", "<C-o>", desc = "Jump", nowait = true, remap = false },
  { "]", group = " Next", nowait = true, remap = false },
  { "]B", "<cmd>blast<cr>", desc = "Buffer", nowait = true, remap = false },
  { "]b", "<cmd>bnext<cr>", desc = "Buffer", nowait = true, remap = false },
  { "]d", "<cmd>Lspsaga diagnostic_jump_next<cr>", desc = "Diagnostic", nowait = true, remap = false },
  { "]e", "g,", desc = "Edit", nowait = true, remap = false },
  { "]g", "<cmd>Gitsigns next_hunk<cr>", desc = "Git Hunk", nowait = true, remap = false },
  { "]j", "<C-i>", desc = "Jump", nowait = true, remap = false },
}

-- which_key.setup(setup)
which_key.add(mappings)
which_key.add(vmappings)
which_key.add(no_leader_mappings)
-- which_key.register({ mode = { "o", "x" }, i = i, a = a })
