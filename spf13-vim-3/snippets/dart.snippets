snippet lib
	library ${1};
	${0}
snippet im
	import 'package:${1}/${2}.dart';
	${0}
snippet rgx
	new RegExp(r'${1}')
snippet var
	var ${1} = ${2};
snippet main
	main() {
	  ${0}
	}
snippet st
	static ${0}
snippet fi
	final ${0}
snippet re
	return ${0}
snippet br
	break;
snippet th
	throw ${0}
snippet cl
	class ${1:`vim_snippets#Filename("", "untitled")`} ${0}
snippet in
	interface ${1:`vim_snippets#Filename("", "untitled")`} ${0}
snippet imp
	implements ${0}
snippet ext
	extends ${0}
snippet if
	if (${1:true}) {
	  ${0}
	}
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${0}
	}
snippet el
	else
snippet sw
	switch (${1}) {
	  ${0}
	}
snippet cs
	case ${1}:
	  ${0}
snippet de
	default:
	  ${0}
snippet for
	for (var ${2:i} = 0, len = ${1:things}.length; $2 < len; ${3:++}$2) {
	  ${0:$1[$2]}
	}
snippet fore
	for (final ${2:item} in ${1:itemList}) {
	  ${0}
	}
snippet wh
	while (${1:/* condition */}) {
	  ${0}
	}
snippet dowh
	do {
	  ${0}
	} while (${0:/* condition */});
snippet as
	assert(${0:/* condition */});
snippet try
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	}
snippet tryf
	try {
	  ${0:${VISUAL}}
	} catch (${1:Exception e}) {
	} finally {
	}
snippet stl
	import 'package:flutter/material.dart';

	class ${1:NAME} extends StatelessWidget {
		${0:$1}({Key key}): super(key: key);
		@override
		Widget build(BuildContext context) {
			return Container();
		}
	}
snippet stf
	import 'package:flutter/material.dart';

	class ${1:NAME} extends StatefulWidget {
		${0:$1}({Key key}) : super(key: key);
		@override
		_${0:$1}State createState() => _${0:$1}State();
	}

	class _${0:$1}State extends State<${0:$1}> {
		dispose(){
			super.dispose();
		}
		initState(){
			super.initState();
		}
		@override
		Widget build(BuildContext context) {
			return Container();
		}
	}
snippet wsw
	final screenWidth = MediaQuery.of(context).size.width;
snippet wsh
	final screenHeight = MediaQuery.of(context).size.height;
snippet wsb
	SizedBox(${0}),
snippet wnpush
	Navigator.of(context).push(
			MaterialPageRoute(builder: (context) => ${1:widget}(
			)
			));
snippet wnpop
	Navigator.of(context).pop();
snippet wfs
	final String ${0};
snippet whero
	Hero(
	    tag: ,
	    child: ,
	),
snippet wpad
	Padding(
			padding: const EdgeInsets${0}(),
			child: ,
	),
snippet wstyle
	style: TextStyle(
			fontSize: ${1:fontSize},
			color: Colors${2},
			fontWeight: FontWeight${3},
	),
snippet wdecoration
	decoration: BoxDecoration(
			borderRadius: BorderRadius.circular(${1:size}),
			color: Colors${2},
	),
